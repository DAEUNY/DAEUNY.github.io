---
title:  "[PROGRAMMERS] JS_원소들의 곱과 합"
excerpt: ""

categories:
  - JS
tags:
  - [TIL, PROGRAMMERS, Blog]

toc: true
toc_sticky: true
 
date: 2023-10-06
last_modified_at: 2023-10-06
---

> comment
> 같이 부트캠프 공부했던 분과 js 기초 다시 공부하면서 챌린저스로 강제성을 부여하고 있는 중,,ㅎㅎ 이렇게라도 하니 하게 된다. 
> 막 인증날 10시 11시 들어가서 하는 건 안 비밀🙀
> 프로그래머스에서 거의 0레벨, 1레벨 수준으로 풀고 있는데, 문법들 기억이 새록새록. 요즘 당연히 쓰는 것들만 쓰다보니 오히려 기본 사용법에서 헷갈리는게 나오는구나! 
> 하.. 이런 기초 문제에서도 틀리다니.. 어떻게 .length를 뺴먹어서 틀릴 수가 있을까?😭 계속 기록하면서 열심히 해보자! 
---



###문제

---

정수가 담긴 리스트 num_list가 주어질 때, 모든 원소들의 곱이 모든 원소들의 합의 제곱보다 작으면 1을 크면 0을 return 하도록 solution 함수를 완성해주세요.



###수도코드 작성 및 코드

---

- num_list는 배열이다.
- 배열의 전체 인덱스를 한바퀴 돌면서 각 인덱스의 값을 가져와야 한다
    - 배열의 각 인덱스를 돈다?
        - for
            
            `0.07ms, 33.5MB`
            
            ```jsx
            // 1. for 
            
            function solution(num_list) {
                var answer = 0;
                let sum = 0
                let mul = 1
                    
                for (let i = 0; i <= num_list.length-1; i++) {
                    sum = sum + num_list[i]
                    mul = mul * num_list[i]
                }
                
                // let pow = Math.pow(sum, 2)
                let pow = sum * sum
                if (mul > pow) {
                    return answer = 0
                } else {
                    return answer = 1
                }
            ```
            
        - for of (for of 와 for in 차이점)
            
            `0.05ms, 33.5MB`
            
            ```jsx
            function solution(num_list) {
                var answer = 0;
            
                let sum = 0
                let mul = 1
                
                for (let i of num_list) {
                    sum += i
                    mul *= i
                }
                
                if (mul < sum ** 2) {
                    return 1
                    }
                return 0
            }
            ```
            
        - reduce 함수
            
            `0.08ms, 33.5MB`
            
            ```jsx
            function solution(num_list) {
                var answer = 0;
            		let sum = num_list.reduce((a, c) => a + c, 0);
                let mul = num_list.reduce((a, c) => a * c, 1);
                return mul < sum*sum ? 1 : 0
            }
            ```
            
        - Mdn reduce example. (module..?이라고 할 수 있나?)
            
            ```jsx
            function solution(num_list) {
                var answer = 0;
            		let getSum = (a, c) => (a + c)
                let getMul = (a, c) => (a * c)
                
                let sum = num_list.reduce(getSum, 0)
                let mul = num_list.reduce(getMul, 1)
                
                return mul < sum * sum ? 1 : 0
            ```
            
    
- 가져온 인덱스의 숫자를 더한 값을 담는 변수가 필요하다
- 가져온 인덱스의 숫자를 곱한 값을 담는 변수가 필요하다
- 더한 값을 담은 변수를 제곱한 후, 곱한 값이 담긴 변수와 크기를 비교한다
    - 제곱
        
        `n * n`: n의 2제곱 - 제곱하는 만큼 *를 추가
        
        `n ** 2` : n의 2제곱 - 제곱할 횟수를 숫자로 입력
        
        `Math.pow(n, 2)` : n의 2제곱 - 제곱할 횟수를 pow 함수의 두번째 인자로  입력
        
- 더한 값의 제곱이 더 크면 1을 반환, 작으면 0을 반환한다
    - 조건부
        - if
            
            ```jsx
            if (여기 쓴 조건에 해당하는 경우만) {
            	여기 내용을 실행해라
            }
            
            if (곱한 값 보다 더한 값의 제곱이 크다면) {
            	1을 반환하라 
            }
            
            if (mul < sum ** 2) {
            	return 1
            }
            ```
            
        - 삼항연산자
